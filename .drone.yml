pipeline:

  # First step is yml file syntax check for all environment
  yml_syntax_check:
    image: inzinger/alpine-ruby:2.3
    commands:
      - ruby -r yaml -e 'YAML.parse(File.open("./var-dev.yml"))'
      - ruby -r yaml -e 'YAML.parse(File.open("./var-stg.yml"))'
      - ruby -r yaml -e 'YAML.parse(File.open("./var-prd.yml"))'

  # This step runs the template engine for sandbox and dev services
  # notice we are setting an env for dev that will trigger
  # dev specific domain templating (dev + sandboxes)
  # someday if .sbx.nytimes.com is not Vi alpha service only we will iterate
  dev-template:
    image: hairyhenderson/gomplate:v2.3.0
    environment:
      - env=dev
    commands:
      - /gomplate -f main.tmpl -o main.tf -d config=var-dev.yml
      - /gomplate -f builds/www.stg.nytimes.com/backend-health-service.tmpl -o builds/www.stg.nytimes.com/backend-health-service.vcl -d config=var-dev.yml
    when:
      event: push

  # this step is used to validate the Terraform syntax before attempting apply
  # the terraform configuration to the service, it essentially runs: terraform plan
  # it's ok that this uses dev service for everything, just a plan to validate tf
  tf_syntax_check:
    image: jmccann/drone-terraform:4.0-0.10.7
    plan: true
    init_options:
      backend-config:
        - "path=fastly/fastly-www/dev/terraform.tfstate"
    vars:
      env: dev
      service_name: dev
    secrets: [FASTLY_API_KEY, GOOGLE_CREDENTIALS]
    when:
      event: push

  # SANDBOX: uses branch sandbox01 to deploy to www.sandbox01
  sandbox01:
    image: jmccann/drone-terraform:4.0-0.10.7
    plan: false
    init_options:
      backend-config:
        - "path=fastly/fastly-www/sandbox01/terraform.tfstate"
    vars:
      env: dev
      service_name: sandbox01
    secrets: [FASTLY_API_KEY, GOOGLE_CREDENTIALS]
    when:
      event: push
      branch:
        include: [ sandbox01 ]

  # SANDBOX: uses branch sandbox02 to deploy to www.sandbox02
  sandbox02:
    image: jmccann/drone-terraform:4.0-0.10.7
    plan: false
    init_options:
      backend-config:
        - "path=fastly/fastly-www/sandbox02/terraform.tfstate"
    vars:
      env: dev
      service_name: sandbox02
    secrets: [FASTLY_API_KEY, GOOGLE_CREDENTIALS]
    when:
      event: push
      branch:
        include: [ sandbox02 ]

  # SANDBOX: uses branch sandbox03 to deploy to www.sandbox03
  sandbox03:
    image: jmccann/drone-terraform:4.0-0.10.7
    plan: false
    init_options:
      backend-config:
        - "path=fastly/fastly-www/sandbox03/terraform.tfstate"
    vars:
      env: dev
      service_name: sandbox03
    secrets: [FASTLY_API_KEY, GOOGLE_CREDENTIALS]
    when:
      event: push
      branch:
        include: [ sandbox03 ]

  # SANDBOX: uses branch sandbox04 to deploy to www.sandbox04
  sandbox04:
    image: jmccann/drone-terraform:4.0-0.10.7
    plan: false
    init_options:
      backend-config:
        - "path=fastly/fastly-www/sandbox04/terraform.tfstate"
    vars:
      env: dev
      service_name: sandbox04
    secrets: [FASTLY_API_KEY, GOOGLE_CREDENTIALS]
    when:
      event: push
      branch:
        include: [ sandbox04 ]

  # DEV: Deploy to www.dev service
  dev:
    image: jmccann/drone-terraform:4.0-0.10.7
    plan: false
    init_options:
      backend-config:
        - "path=fastly/fastly-www/dev/terraform.tfstate"
    vars:
      env: dev
      service_name: dev
    secrets: [FASTLY_API_KEY, GOOGLE_CREDENTIALS]
    when:
      event: push
      branch:
        exclude: [ sandbox01, sandbox02, sandbox03, sandbox04 ]

  # # Run tests against dev service
  # dev-test:
  #   image: us.gcr.io/nyt-registry-prd/drone-fastly-tests
  #   servername: www.dev.nytimes.com
  #   when:
  #     event: pull_request

  stg-template:
    image: hairyhenderson/gomplate:v2.3.0
    commands:
      - /gomplate -f main.tmpl -o main.tf -d config=var-stg.yml
      - /gomplate -f builds/www.stg.nytimes.com/backend-health-service.tmpl -o builds/www.stg.nytimes.com/backend-health-service.vcl -d config=var-stg.yml
    when:
      event: push
      branch: master

  # --------
  # Deployment to staging service
  staging:
    image: jmccann/drone-terraform:4.0-0.10.7
    plan: false
    init_options:
      backend-config:
        - "path=fastly/fastly-www/stg/terraform.tfstate"
    vars:
      env: stg
      service_name: stg
    secrets: [FASTLY_API_KEY, GOOGLE_CREDENTIALS]
    when:
      event: push
      branch: master

  stg-test:
    image: us.gcr.io/nyt-registry-prd/drone-fastly-tests
    servername: www.stg.nytimes.com
    print_failures_only: true
    when:
      event: push
      branch: master

  # -----
  prd-template:
    image: hairyhenderson/gomplate:v2.3.0
    commands:
      - /gomplate -f main.tmpl -o main.tf -d config=var-prd.yml
      - /gomplate -f builds/www.stg.nytimes.com/backend-health-service.tmpl -o builds/www.stg.nytimes.com/backend-health-service.vcl -d config=var-prd.yml
    when:
      event: tag

 # Deployment to production service
  production:
    image: jmccann/drone-terraform:4.0-0.10.7
    plan: false
    init_options:
      backend-config:
        - "path=fastly/fastly-www/prd/terraform.tfstate"
    vars:
      env: prd
      service_name: prd
    secrets: [FASTLY_API_KEY, GOOGLE_CREDENTIALS]
    when:
      event: tag

  prd-test:
    image: us.gcr.io/nyt-registry-prd/drone-fastly-tests
    servername: www.nytimes.com
    print_failures_only: true
    when:
      event: tag

  slack:
    image: plugins/slack
    channel: fastly-builds
    username: fastly-www
    secrets: [SLACK_WEBHOOK]
    when:
      status: [success, failure, blocked]
