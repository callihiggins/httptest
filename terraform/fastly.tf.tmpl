module "shared_vcl" {
  source = "git::https://github.com/nytm/fastly-shared-code.git//vcl?ref=master"
}

module "cmots_shared_vcl" {
  source = "git::https://github.com/nytm/fastly-shared-cmots.git//vcl?ref=master"
}

resource "fastly_service_v1" "service" {
  name = "${var.app}.${var.service_name}"

  {{ $domains := (datasource "env_config").domains }}

  {{/*
    for DEV, we will range over the domains for sandboxes
    if the branch exists as a scalar (sandoxes are branch based)
    if there are no domains for the branch, range over .dev env base domains
  */}}

  {{if eq (env.Getenv "env") "dev"}}

    {{ $domain_service := env.Getenv "DRONE_BRANCH"}}
    {{if (has $domains $domain_service)}}
      {{range (index $domains $domain_service) -}}
      domain {
        name = "{{.name}}"
      }
      {{end -}}
    {{else}}
      {{range $domains.dev -}}
      domain {
        name = "{{.name}}"
      }
      {{end -}}
    {{end}}

  {{else}}

  {{/*
    if we are in stg or prd, just range over the domains configured
    as there are no env/branch scalars under stg/prd configured domains
  */}}

    {{range $domains -}}
    domain {
      name = "{{.name}}"
    }
    {{end -}}

  {{end}}

  {{ $backends := (datasource "env_config").backends }}
  {{ $backend_defaults := (datasource "env_config").backend_defaults }}
  {{ $healthcheck_defaults := (datasource "env_config").healthcheck_defaults }}
  {{range $backends -}}
  backend = {
    name = "{{.name}}"
    address = "{{.address}}"
    auto_loadbalance = "{{$backend_defaults.auto_loadbalance}}"
    between_bytes_timeout = "{{.between_bytes_timeout}}"
    connect_timeout = "{{.connect_timeout}}"
    first_byte_timeout = "{{.first_byte_timeout}}"
    {{if (has . "port")}}
    port = "{{.port}}"
    {{else}}
    port = "{{$backend_defaults.port}}"
    {{end}}
    {{if (has . "use_ssl")}}
    {{if eq .use_ssl "true"}}
    use_ssl = "{{.use_ssl}}"
    ssl_check_cert = "{{$backend_defaults.ssl_check_cert}}"
    ssl_cert_hostname = "{{.ssl_cert_hostname}}"
    ssl_sni_hostname = "{{.ssl_sni_hostname}}"
    {{else}}
    use_ssl = "false"
    {{end}}
    {{else}}
    use_ssl = "{{$backend_defaults.use_ssl}}"
    ssl_check_cert = "{{$backend_defaults.ssl_check_cert}}"
    ssl_cert_hostname = "{{.ssl_cert_hostname}}"
    ssl_sni_hostname = "{{.ssl_sni_hostname}}"
    {{end}}
    healthcheck = "{{.name}}_healthcheck"
    request_condition = "{{.name}}_backend"
    {{if (has . "shield")}}
    shield = "{{.shield}}"
    {{end}}

  }

  healthcheck = {
    name = "{{.name}}_healthcheck"
    host = "{{.healthcheck.host}}"
    path = "{{.healthcheck.path}}"
    check_interval = "{{.healthcheck.check_interval}}"
    expected_response = "{{.healthcheck.expected_response}}"
    initial = "{{.healthcheck.initial}}"
    threshold = "{{.healthcheck.threshold}}"
    timeout = "{{.healthcheck.timeout}}"
    window = "{{.healthcheck.window}}"
    {{if (has .healthcheck "method")}}
    method = "{{.healthcheck.method}}"
    {{else}}
    method = "{{$healthcheck_defaults.method}}"
    {{end}}
  }

  condition = {
    name = "{{.name}}_backend"
    statement = "req.http.x-nyt-backend == \"{{.name}}\""
    type = "REQUEST"
    priority = "500"
  }

  {{end -}}



  {{ $cloud_storage_buckets := (datasource "env_config").cloud_storage_buckets }}
  {{ $cloud_storage_bucket_defaults := (datasource "env_config").cloud_storage_bucket_defaults }}
  {{range $cloud_storage_buckets -}}

  condition = {
    name = "{{.route}}_bucket"
    statement = "req.http.x-nyt-route == \"{{.route}}\""
    type = "REQUEST"
    priority = "500"
  }

  header {
    action      = "set"
    name        = "{{.route}}"
    priority    = "400"
    source      = "\"{{.bucket_name}}\""
    destination = "http.x-nyt-bucket-name"
    type        = "request"
    request_condition   = "{{.route}}_bucket"
  }

  header {
    action      = "set"
    name        = "{{.route}}_bucket_provider"
    priority    = "401"
    source      = "\"{{.bucket_provider}}\""
    destination = "http.x-nyt-bucket-provider"
    type        = "request"
    request_condition   = "{{.route}}_bucket"
  }

  {{if eq .auth "true"}}
  header {
    action      = "set"
    name        = "{{.route}}_auth"
    priority    = "401"
    source      = "\"true\""
    destination = "http.x-nyt-bucket-auth"
    type        = "request"
    request_condition   = "{{.route}}_bucket"
  }

  header {
    action      = "set"
    name        = "{{.route}}_token"
    priority    = "401"
    {{if (has . "auth_key")}}
    source      = "\"{{.auth_key}}\""
    {{else}}
    {{if eq .bucket_provider "gcs"}}
    source      = "\"{{$cloud_storage_bucket_defaults.gcs_auth_key}}\""
    {{else}}
    source      = "\"{{$cloud_storage_bucket_defaults.s3_auth_key}}\""
    {{end}}
    {{end}}
    destination = "http.x-nyt-bucket-token"
    type        = "request"
    request_condition   = "{{.route}}_bucket"
  }

  header {
    action      = "set"
    name        = "{{.route}}_secret"
    priority    = "401"
    {{if (has . "auth_secret")}}
    source      = "\"{{.auth_secret}}\""
    {{else}}
    {{if eq .bucket_provider "gcs"}}
    source      = "\"{{$cloud_storage_bucket_defaults.gcs_auth_secret}}\""
    {{else}}
    source      = "\"{{$cloud_storage_bucket_defaults.s3_auth_secret}}\""
    {{end}}
    {{end}}
    destination = "http.x-nyt-bucket-secret"
    type        = "request"
    request_condition   = "{{.route}}_bucket"
  }

  {{end}}

  {{end -}}

  # this is set in init-vars.vcl
  header {
    action      = "set"
    name        = "environment"
    priority    = "1"
    source      = "\"${var.env}\""
    destination = "http.var-nyt-env"
    type        = "request"
  }

  # look in main.vcl for this logic for the time being
  default_ttl = 3600

  gzip {
    content_types = [
      "application/x-font-opentype",
      "text/xml",
      "text/javascript",
      "application/x-font-ttf",
      "font/otf",
      "font/eot",
      "image/svg+xml",
      "application/json",
      "text/plain",
      "font/opentype",
      "application/vnd.ms-fontobject",
      "image/vnd.microsoft.icon",
      "application/xml",
      "application/x-javascript",
      "application/javascript",
      "text/css",
      "text/html",
      "application/x-font-truetype",
    ]

    extensions = [
      "json",
      "ico",
      "svg",
      "otf",
      "eot",
      "js",
      "html",
      "ttf",
      "css",
    ]

    name = "Default Gzip Policy"
  }

  header {
    action        = "set"
    destination   = "http.Fastly-Purge-Requires-Auth"
    ignore_if_set = false
    name          = "Fastly Purge"
    priority      = "10"
    source        = "\"1\""
    type          = "request"
  }


  ########### Beginning of Sumolog integration #############
  {{ $sumo_log := (datasource "shared_config").sumo_log }}
  sumologic = [
  {
    name               = "${var.sumo_logger_name[var.env]}"
    url                = "${var.sumologic_endpoint_json[var.env]}"
    response_condition = "www-json-log"
    format_version     = "2"
    format             = "{{$sumo_log.format}}"
    message_type       = "blank"
  },
  {
    name               = "${var.sumo_logger_purge_name[var.env]}"
    url                = "${var.sumologic_endpoint_json_purge[var.env]}"
    response_condition = "do-not-log"
    format_version     = "2"
    format             = "{{$sumo_log.format}}"
    message_type       = "blank"
  }
  ]

  condition {
    name      = "do-not-log"
    priority  = 10
    statement = "!req.url"
    type      = "RESPONSE"
  }

  condition {
    name      = "www-json-log"
    priority  = 10
    statement = "(req.url !~ \"^/svc/(web-products|comscore)\" && req.url !~ \"^/adx/\" && req.http.x-nyt-route != \"vi-assets\") || (req.http.var-nyt-env != \"prd\") || (resp.status >= 400)"
    type      = "RESPONSE"
  }

  ########### End of Sumolog integration #############

  # bigquery logging integration
  {{ $bigquery_env_log := (datasource "env_config").bigquery_log }}
  {{ $bigquery_shared_log := (datasource "shared_config").bigquery_log }}
  bigquerylogging {
    name       = "{{$bigquery_env_log.name}}"
    project_id = "{{$bigquery_env_log.project_id}}"
    dataset    = "{{$bigquery_env_log.dataset}}"
    table      = "{{$bigquery_env_log.table}}"
    email      = "{{$bigquery_env_log.email}}"
    template   = "{{$bigquery_shared_log.template}}"
    format     = "{{$bigquery_shared_log.format}}"
    secret_key = "${var.bigquery_secret_key}"
    response_condition = "bigquerylogging-suppression"
  }

  condition {
    name      = "bigquerylogging-suppression"
    priority  = 10
    statement = "req.http.x-nyt-route != \"vi-assets\" || resp.status >= 400 || req.http.var-nyt-env != \"prd\""
    type      = "RESPONSE"
  }

  ########### Beginning of GCS Logging integration #############

  {{ $gcslogging_shared := (datasource "shared_config").gcslogging }}
  {{ $gcslogging_env := (datasource "env_config").gcslogging }}
  {{ $gcslogging_defaults := (datasource "env_config").gcslogging_defaults }}
  {{ $backends := (datasource "env_config").backends }}
  {{ range $backends -}}

  # If backend has GCS log export configuration details, create A GCS endpoint to send streaming logs too
  # @todo(montmanu): remove feature gate once changes are validated in pre-prod deployments
  {{ if (has . "gcslogging") and (ne (env.Getenv "env") "prd") }}
  gcslogging {
    {{ if (has .gcslogging "name") }}
    name               = "{{ .gcslogging.name }}"
    {{ else }}
    name               = "{{ $gcslogging_env.name_prefix }}_{{ .name }}"
    {{ end }}

    email              = "{{ $gcslogging_env.email }}"

    {{ if (has .gcslogging "bucket_name") }}
    bucket_name        = "{{ .gcslogging.bucket_name }}"
    {{ else }}
    bucket_name        = "{{ $gcslogging_env.bucket_name_prefix }}_{{ .name }}"
    {{ end }}

    secret_key         = "${var.gcs_secret_key}"

    {{ if (has .gcslogging "path") }}
    path               = "{{ .gcslogging.path }}"
    {{ else }}
    path               = "{{ $gcslogging_defaults.path }}"
    {{ end }}

    {{ if (has .gcslogging "period") }}
    period             = "{{ .gcslogging.period }}"
    {{ else }}
    period             = "{{ $gcslogging_defaults.period }}"
    {{ end }}

    {{ if (has .gcslogging "gzip_level") }}
    gzip_level         = "{{ .gcslogging.gzip_level }}"
    {{ else }}
    gzip_level         = "{{ $gcslogging_defaults.gzip_level }}"
    {{ end }}

    format             = "{{ $gcslogging_shared.format }}"
    response_condition = "gcslogging-suppression-{{ .name }}"

    {{ if (has .gcslogging "message_type") }}
    message_type       = "{{ .gcslogging.message_type }}"
    {{ else }}
    message_type       = "{{ $gcslogging_defaults.message_type }}"
    {{ end }}
  }

  condition {
    name      = "gcslogging-suppression-{{ .name }}"
    priority  = 10
    {{ if (has .gcslogging "response_condition_statement") }}
    statement = "{{ .gcslogging.response_condition_statement }}"
    {{ else }}
    statement = "req.http.x-nyt-backend == \"{{.name}}\""
    {{ end }}
    type      = "RESPONSE"
  }
  {{- end -}}
  {{- end -}}

  ########### End of GCS Logging integration #############

  ####### Begin Botify / S3 Logging #######

  {{ $botify_env_s3_logging := (datasource "env_config").botify_s3_logging }}
  condition {
    name      = "botifylogging-suppression"
    priority  = 10
    statement = "req.http.device_type == \"crawler\""
    type      = "RESPONSE"
  }

  s3logging {
    name               = "botify-${var.app}-${var.env}"
    bucket_name        = "{{$botify_env_s3_logging.bucket_name}}"
    path               = "/customer.the-new-york-times_19039/nyt-20m-weekly/"
    s3_access_key      = "{{$botify_env_s3_logging.s3_access_key}}"
    s3_secret_key      = "${var.botify_s3_secret_key}"
    gzip_level         = 9
    format_version     = 2
    period             = 3600
    message_type       = "blank"
    format             = "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-agent}i\""
    timestamp_format   = "%Y-%m-%dT%H:%M:%S.000"
    response_condition = "botifylogging-suppression"
  }

  ####### End Botify / S3 Logging #######

  ########### Beginning of SEO Logging integration #############

  {{ $seo_env_logging := (datasource "env_config").seo_gcs_logging }}
  condition {
    name      = "seologging-suppression"
    priority  = 10
    statement = "req.http.device_type == \"crawler\""
    type      = "RESPONSE"
  }

  gcslogging {
    name               = "SEO-logging-${var.env}"
    email              = "{{$seo_env_logging.email}}"
    bucket_name        = "{{$seo_env_logging.bucket_name}}"
    secret_key         = "${var.gcs_secret_key}"
    path               = "/"
    period             = 60
    gzip_level         = 9
    format             = "\"%h\",%l,%u,\"%t\",\"%r\",%>s,%b,\"%{Referer}i\",\"%{User-agent}i\""
    response_condition = "seologging-suppression"
    message_type       = "blank"
  }

  ########### End of SEO Logging integration #############

  vcl {
    name    = "route-newsdev-attribute"
    main    = false
    content = "${file("../vcl/route-newsdev-attribute.vcl")}"
  }

  vcl {
    name    = "route-newsdev-gcs"
    main    = false
    content = "${file("../vcl/route-newsdev-gcs.vcl")}"
  }

  vcl {
    name    = "abra"
    main    = false
    content = "${file("../vcl/abra.vcl")}"
  }

  vcl {
    name    = "bot-detection"
    main    = false
    content = "${file("../vcl/bot-detection.vcl")}"
  }

  vcl {
    name    = "main"
    main    = true
    content = "${file("../vcl/main.vcl")}"
  }

  vcl {
    name    = "shared-access-control"
    content = "${module.shared_vcl.access_control}"
  }

  vcl {
    name    = "shared-vcl-version"
    content = "${module.shared_vcl.vcl_version}"
  }

  vcl {
    name    = "shared-geoip-headers-init"
    content = "${module.shared_vcl.geoip_headers_init}"
  }

  vcl {
    name    = "shared-device-detection-init"
    content = "${module.shared_vcl.device_detection_init}"
  }

  vcl {
    name    = "shared-socrates-acl"
    content = "${module.shared_vcl.socrates_acl}"
  }

  vcl {
    name    = "shared-cak12-acl"
    content = "${module.shared_vcl.cak12_acl}"
  }

  vcl {
    name    = "shared-purr"
    content = "${module.shared_vcl.purr}"
  }

  vcl {
    name    = "shared-cmots-headers-init"
    content = "${module.cmots_shared_vcl.cmots_headers_init}"
  }

  vcl {
    name    = "shared-cmots-fallbacks"
    content = "${module.cmots_shared_vcl.cmots_fallbacks}"
  }

  vcl {
    name    = "surrogate-key"
    main    = false
    content = "${file("../vcl/surrogate-key.vcl")}"
  }

  vcl {
    name    = "routes-vi"
    main    =  false
    content = "${file("../vcl/routes-vi.vcl")}"
  }

  vcl {
    name    = "route-elections"
    main    = false
    content = "${file("../vcl/route-elections.vcl")}"
  }

  vcl {
    name    = "https-redirect"
    main    = false
    content = "${file("../vcl/https-redirect.vcl")}"
  }

  vcl {
    name    = "response-headers"
    main    = false
    content = "${file("../vcl/response-headers.vcl")}"
  }

  vcl {
    name    = "route-mwcm"
    main    = false
    content = "${file("../vcl/route-mwcm.vcl")}"
  }

  vcl {
    name    = "route-content-api"
    main    = false
    content = "${file("../vcl/route-content-api.vcl")}"
  }

  vcl {
    name    = "route-intl"
    main    = false
    content = "${file("../vcl/route-intl.vcl")}"
  }

  vcl {
    name    = "route-invalid-requests"
    main    = false
    content = "${file("../vcl/route-invalid-requests.vcl")}"
  }

  vcl {
    name    = "initialize-transaction-state"
    main    = false
    content = "${file("../vcl/initialize-transaction-state.vcl")}"
  }

  vcl {
    name    = "route-newsdev-gke"
    main    = false
    content = "${file("../vcl/route-newsdev-gke.vcl")}"
  }

  vcl {
    name    = "frame-buster"
    main    = false
    content = "${file("../vcl/frame-buster.vcl")}"
  }

  vcl {
    name    = "route-games"
    main    = false
    content = "${file("../vcl/route-games.vcl")}"
  }

  vcl {
    name    = "route-video"
    main    = false
    content = "${file("../vcl/route-video.vcl")}"
  }

  vcl {
    name    = "route-wirecutter"
    main    = false
    content = "${file("../vcl/route-wirecutter.vcl")}"
  }

  vcl {
    name    = "subscription-currency-map-table"
    main    = false
    content = "${file("../vcl/subscription-currency-map-table.vcl")}"
  }

  vcl {
    name    = "route-tbooks"
    main    = false
    content = "${file("../vcl/route-tbooks.vcl")}"
  }

  vcl {
    name    = "route-guides"
    main    = false
    content = "${file("../vcl/route-guides.vcl")}"
  }

  vcl {
    name    = "route-programs"
    main    = false
    content = "${file("../vcl/route-programs.vcl")}"
  }

  vcl {
    name    = "route-zone-apex-redirect"
    main    = false
    content = "${file("../vcl/route-zone-apex-redirect.vcl")}"
  }

  vcl {
    name    = "route-fastly-healthcheck"
    main    = false
    content = "${file("../vcl/route-fastly-healthcheck.vcl")}"
  }

  vcl {
    name    = "route-times-journeys"
    main    = false
    content = "${file("../vcl/route-times-journeys.vcl")}"
  }

  vcl {
    name    = "route-userinfo"
    main    = false
    content = "${file("../vcl/route-userinfo.vcl")}"
  }

  vcl {
    name    = "geoip-homepage-briefing-map"
    main    = false
    content = "${file("../vcl/geoip-homepage-briefing-map.vcl")}"
  }

  vcl {
    name    = "sanitize-request"
    main    = false
    content = "${file("../vcl/sanitize-request.vcl")}"
  }

  vcl {
    name    = "route-backend-health-report"
    main    = false
    content = "${file("../vcl/route-backend-health-report.vcl")}"
  }

  vcl {
    name    = "route-geoip"
    main    = false
    content = "${file("../vcl/route-geoip.vcl")}"
  }

  vcl {
    name    = "acl-googlebot"
    main    = false
    content = "${file("../vcl/acl-googlebot.vcl")}"
  }

  vcl {
    name    = "acl-bingbot"
    main    = false
    content = "${file("../vcl/acl-bingbot.vcl")}"
  }

  vcl {
    name    = "acl-botify"
    main    = false
    content = "${file("../vcl/acl-botify.vcl")}"
  }

  vcl {
    name    = "route-paidpost"
    main    = false
    content = "${file("../vcl/route-paidpost.vcl")}"
  }

  vcl {
    name    = "route-watching"
    main    = false
    content = "${file("../vcl/route-watching.vcl")}"
  }

  vcl {
    name    = "agent-id"
    main    = false
    content = "${file("../vcl/agent-id.vcl")}"
  }

  vcl {
    name    = "gdpr"
    main    = false
    content = "${file("../vcl/gdpr.vcl")}"
  }

  vcl {
    name    = "error-pages"
    main    = false
    content = "${file("../vcl/error-pages.vcl")}"
  }

  vcl {
    name    = "route-slideshow"
    main    = false
    content = "${file("../vcl/route-slideshow.vcl")}"
  }

  vcl {
    name    = "route-story"
    main    = false
    content = "${file("../vcl/route-story.vcl")}"
  }

  vcl {
    name    = "route-homepage"
    main    = false
    content = "${file("../vcl/route-homepage.vcl")}"
  }

  vcl {
    name    = "auth-headers"
    main    = false
    content = "${file("../vcl/auth-headers.vcl")}"
  }

  vcl {
    name    = "route-default"
    main    = false
    content = "${file("../vcl/route-default.vcl")}"
  }

  vcl {
    name    = "route-adx"
    main    = false
    content = "${file("../vcl/route-adx.vcl")}"
  }

  vcl {
    name    = "route-nyt5-misc"
    main    = false
    content = "${file("../vcl/route-nyt5-misc.vcl")}"
  }

  vcl {
    name    = "set-cache-object-ttl"
    main    = false
    content = "${file("../vcl/set-cache-object-ttl.vcl")}"
  }

  vcl {
    name    = "origin-response-handler"
    main    = false
    content = "${file("../vcl/origin-response-handler.vcl")}"
  }

  vcl {
    name    = "origin-request-handler"
    main    = false
    content = "${file("../vcl/origin-request-handler.vcl")}"
  }

  vcl {
    name    = "route-cms-static-assets"
    main    = false
    content = "${file("../vcl/route-cms-static-assets.vcl")}"
  }

  vcl {
    name    = "route-ads-static-assets"
    main    = false
    content = "${file("../vcl/route-ads-static-assets.vcl")}"
  }

  vcl {
    name    = "route-search-suggest-svc"
    main    = false
    content = "${file("../vcl/route-search-suggest-svc.vcl")}"
    }

  vcl {
    name    = "route-collections-svc"
    main    = false
    content = "${file("../vcl/route-collections-svc.vcl")}"
  }

  vcl {
    name    = "route-add-svc"
    main    = false
    content = "${file("../vcl/route-add-svc.vcl")}"
  }

  vcl {
    name    = "route-sitemap"
    main    = false
    content = "${file("../vcl/route-sitemap.vcl")}"
  }

  vcl {
    name    = "route-newsdev-cloud-functions"
    main    = false
    content = "${file("../vcl/route-newsdev-cloud-functions.vcl")}"
  }

  vcl {
    name    = "route-newsroom-files-gcs"
    main    = false
    content = "${file("../vcl/route-newsroom-files-gcs.vcl")}"
  }

  vcl {
    name    = "route-tips-html-gcs"
    main    = false
    content = "${file("../vcl/route-tips-html-gcs.vcl")}"
  }

  vcl {
    name    = "route-newsgraphics-gcs"
    main    = false
    content = "${file("../vcl/route-newsgraphics-gcs.vcl")}"
  }

  vcl {
    name    = "route-profile-fe"
    main    = false
    content = "${file("../vcl/route-profile-fe.vcl")}"
  }

  vcl {
    name    = "route-community-svc"
    main    = false
    content = "${file("../vcl/route-community-svc.vcl")}"
  }

  vcl {
    name    = "route-switchboard"
    main    = false
    content = "${file("../vcl/route-switchboard.vcl")}"
  }

  vcl {
    name    = "route-messaging"
    main    = false
    content = "${file("../vcl/route-messaging.vcl")}"
  }

  vcl {
    name    = "route-esi-jsonp-callback"
    main    = false
    content = "${file("../vcl/route-esi-jsonp-callback.vcl")}"
  }

  vcl {
    name    = "route-recommendations"
    main    = false
    content = "${file("../vcl/route-recommendations.vcl")}"
  }

  vcl {
    name    = "route-newsletters"
    main    = false
    content = "${file("../vcl/route-newsletters.vcl")}"
  }

  vcl {
    name    = "route-real-estate"
    main    = false
    content = "${file("../vcl/route-real-estate.vcl")}"
  }

  vcl {
    name    = "route-weddings"
    main    = false
    content = "${file("../vcl/route-weddings.vcl")}"
  }

  vcl {
    name    = "route-search"
    main    = false
    content = "${file("../vcl/route-search.vcl")}"
  }

  vcl {
    name    = "route-timeswire"
    main    = false
    content = "${file("../vcl/route-timeswire.vcl")}"
  }

  vcl {
    name    = "route-bestsellers"
    main    = false
    content = "${file("../vcl/route-bestsellers.vcl")}"
  }

  vcl {
    name    = "route-blogs"
    main    = false
    content = "${file("../vcl/route-blogs.vcl")}"
  }

  vcl {
    name    = "route-vi-assets"
    main    = false
    content = "${file("../vcl/route-vi-assets.vcl")}"
  }

  vcl {
    name    = "route-collection"
    main    = false
    content = "${file("../vcl/route-collection.vcl")}"
  }

  vcl {
    name    = "route-interactive"
    main    = false
    content = "${file("../vcl/route-interactive.vcl")}"
  }

  vcl {
    name    = "route-gdpr-form"
    main    = false
    content = "${file("../vcl/route-gdpr-form.vcl")}"
  }

  vcl {
    name    = "route-device-detection-debug"
    main    = false
    content = "${file("../vcl/route-device-detection-debug.vcl")}"
  }

  vcl {
    name    = "test-suite-force-miss"
    main    = false
    content = "${file("../vcl/test-suite-force-miss.vcl")}"
  }

  vcl {
    name    = "route-audio"
    main    = false
    content = "${file("../vcl/route-audio.vcl")}"
  }

  vcl {
    name    = "route-ask"
    main    = false
    content = "${file("../vcl/route-ask.vcl")}"
  }

  vcl {
    name    = "route-trending"
    main    = false
    content = "${file("../vcl/route-trending.vcl")}"
  }

  vcl {
    name    = "route-alpha"
    main    = false
    content = "${file("../vcl/route-alpha.vcl")}"
  }

  vcl {
    name    = "log-purge"
    main    = false
    content = "${file("../vcl/log-purge.vcl")}"
  }

  vcl {
    name    = "route-get-started"
    main    = false
    content = "${file("../vcl/route-get-started.vcl")}"
  }

  vcl {
    name    = "route-vi-static-backup-gcs"
    main    = false
    content = "${file("../vcl/route-vi-static-backup-gcs.vcl")}"
  }

  vcl {
    name    = "route-vi-load-test"
    main    = false
    content = "${file("../vcl/route-vi-load-test.vcl")}"
  }

  vcl {
    name    = "route-vi-shared"
    main    = false
    content = "${file("../vcl/route-vi-shared.vcl")}"
  }

  vcl {
    name    = "geo-identifier"
    main    = false
    content = "${file("../vcl/geo-identifier.vcl")}"
  }

  vcl {
    name    = "privacy"
    main    = false
    content = "${file("../vcl/privacy.vcl")}"
  }

  vcl {
    name    = "route-code"
    main    = false
    content = "${file("../vcl/route-code.vcl")}"
  }

  vcl {
    name    = "route-refer"
    main    = false
    content = "${file("../vcl/route-refer.vcl")}"
  }

  vcl {
    name    = "route-weekender"
    main    = false
    content = "${file("../vcl/route-weekender.vcl")}"
  }
}
